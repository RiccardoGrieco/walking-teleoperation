###############
### ROBOT
###############

remote_control_boards   ("right_arm")
remote_sensor_boards    "right_hand"
#axis_list             (  "r_hand_fingers", "r_thumb_oppose", "r_thumb_proximal", "r_thumb_distal", "r_index_proximal", "r_index-distal", "r_middle-proximal", "r_middle-distal", "r_little-fingers" )

axis_list             (  "r_thumb_oppose", "r_thumb_proximal", "r_thumb_distal", "r_index_proximal", "r_index-distal", "r_middle-proximal", "r_middle-distal", "r_little-fingers" )

joint_list            (  "r_thumb_oppose",    "r_thumb_proximal", "r_thumb_middle", "r_thumb_distal",
                         "r_index_proximal",  "r_index_middle",   "r_index_distal",
                         "r_middle_proximal", "r_middle_middle",  "r_middle_distal",
                         "r_ring_proximal",   "r_ring_middle",    "r_ring_distal",
                         "r_pinky_proximal",  "r_pinky_middle",   "r_pinky_distal" )

# if not equal to one, consider the associated  encoder value is used for the joint readout
joint_fb_type         ( encoder , analog , analog , analog ,
                         analog , analog , analog ,
                         analog , analog , analog ,
                         analog , analog , analog ,
                         analog , analog , analog )

# probably can be deleted, since it is similar to previous info
analog_list           (  "r_thumb_proximal",  "r_thumb_middle", "r_thumb_distal",
                         "r_index_proximal",  "r_index_middle", "r_index_distal",
                         "r_middle_proximal", "r_middle_middle", "r_middle_distal",
                         "r_ring_proximal",   "r_ring_middle",   "r_ring_distal",
                         "r_pinky_proximal",  "r_pinky_middle",   "r_pinky_distal" )

# notice that "l_thumb_oppose" is measured by joint encoders not the analog sensors
#Adding the groups of each axis and associated analog sensors

r_thumb_oppose         ( "r_thumb_oppose" )
r_thumb_proximal       ( "r_thumb_proximal" )
r_thumb_distal         ( "r_thumb_middle", "r_thumb_distal"  )
r_index_proximal       ( "r_index_proximal" )
r_index-distal         ( "r_index_middle", "r_index_distal" )
r_middle-proximal      ( "r_middle_proximal" )
r_middle-distal        ( "r_middle_middle", "r_middle_distal" )
r_little-fingers       ( "r_ring_proximal",   "r_ring_middle",   "r_ring_distal", "r_pinky_proximal",   "r_pinky_middle",   "r_pinky_distal" )

###############
### HUMAN
###############

human_joint_list      ( "r_thumb_oppose",    "r_thumb_proximal", "r_thumb_middle", "r_thumb_distal",
                         "r_index_proximal", "r_index_middle",   "r_index_distal",
                         "r_middle_proximal", "r_middle_middle", "r_middle_distal",
                         "r_ring_proximal",   "r_ring_middle",   "r_ring_distal",
                         "r_pinky_proximal",   "r_pinky_middle", "r_pinky_distal" )

human_finger_list ( "r_thumb_finger", "r_index_finger", "r_middle_finger", "r_ring_finger", "r_little_finger")

hand_link           r_hand

###############
### RETARGETING
###############
# haptic feedback retargeting from the robot axis groups to the human finger
all_axis_list            (  "r_thumb_oppose", "r_thumb_proximal", "r_thumb_distal", "r_index_proximal", "r_index-distal", "r_middle-proximal", "r_middle-distal", "r_little-fingers" )

r_thumb_finger                  (  "r_thumb_oppose",   "r_thumb_proximal", "r_thumb_distal"  )
r_index_finger                  (  "r_index_proximal", "r_index-distal"  )
r_middle_finger                 (  "r_middle-proximal", "r_middle-distal"  )
r_ring_finger                   (  "r_little-fingers" )
r_little_finger                  (  "r_little-fingers" )

# This gain is multiplied to the total error for each motor to compute the force feedback to the user, computed by user experience
# No of gains= No of motors
K_GainTotal            ( 0.0 600.0 600.0  600.0 600.0 600.0 600.0  600.0 )

# check this issue for the velocity Gain: https://github.com/dic-iit/element_retargeting-from-human/issues/141
K_GainVelocity ( 0.1 0.1 0.1   0.1 0.1 0.1   0.1 0.1 )

# this value is multiplied to forcefeedback and provides haptic feedback to the user
K_GainBuzzMotors ( 0.8 0.8 0.8  0.8 0.8 )

# scaling and biased values for maping the human to robot motion

human_to_robot_joint_anlges_scaling (  1.0 2.0 2.0 2.0
                                        2.0 2.0 2.0
                                        2.0 2.0 2.0
                                        2.0 2.0 2.0
                                        2.0 2.0 2.0 )

human_to_robot_joint_anlges_bias    (  0.7 0.0 0.0 0.0
                                         0.0 0.0 0.0
                                         0.0 0.0 0.0
                                         0.0 0.0 0.0
                                         0.0 0.0 0.0  )

##############################
### ROBOT CONTROL & ESTIMATION
##############################

useVelocity           0
noAnalogSensor        15
noAllJoints           16
noAllAxis             8

# minimum and maximum values of the joints
# only index finger is used, analog indices: 3, 4, 5 
# related to analog sensors


joints_min_boundary_all ( 0.0 0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0  )
joints_max_boundary_all ( 90.0 90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0 )

joints_min_boundary ( 0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0  )
joints_max_boundary ( 90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0 )

sensors_min_boundary ( 248.0 255.0 255.0   255.0 255.0 255.0    255.0 255.0 255.0     252.0 255.0 255.0    248.0 251.0 251.0  )
sensors_max_boundary ( 22.0 0.0 40.0       18.0 19.0 14.0       0.0 13.0 18.0         73.0 0.0 143.0       23.0 30.0 61.0 )


# fingersScaling        ( 1, 1, 1,   1, 1, 1,   1, 1 )
fingersScaling           1.0

# in case each joint does not have independant motor to actuate, they are coupled
motorsJointsCoupled     1

doCalibration           1

#robot controller exponential filter gain
expFilterGain           0.9


# if doing the calibration process, it will use velocity control mode,
#   and will overwrite the control mode mentioned in other configuration


# q= A x m, where:
#       q (n,1) is the joint values
#       m (m,1) is the motors values
#       A (n,m) is the mapping from the motors values to the joint values

# CouplingMatrix = A : (n,m) matrix
CouplingMatrix          ( 1.1 0.0 0.0 0.0 0.0
                          0.0 1.0 1.0 0.0 0.0
                          0.0 0.0 1.0 0.0 0.0
                          0.0 0.0 0.0 0.0 1.0 )

#  joints[0] is the abduction/adduction for which we don't have any MAIS readout
# 3 numbers per finger accounting in order for the proximal and the two distal phalanxes.
# the fingers' order is: thumb, index, middle, ring, pinkie.

# in the Quadratic optimizartion problem to compute the motor values from the joint values : xT Q X + uT R u
# q_matrix_joint_motor is the list identifying the main diagonal of matrix Q: (q x q) matrix; q: is the number of desired joints to control
# r_matrix_joint_motor is the list identifying the main diagonal of matrix R: (m x m) matrix; m: is the number of desired motors to control

# q_matrix_joint_motor    ( 1.0 1.0 1.0 1.0  1.0 1.0 1.0   1.0 1.0 1.0   1.0 1.0 1.0  1.0  )
q_joint_motor            1.0

# r_matrix_joint_motor    ( 0.0 0.0 0.0  0.0 0.0 0.0    0.0 0.0 )
r_joint_motor             0.0

# in the Kalman Filter problem to estimate the motor value, velocity and acceleration:
# q_matrix_kf is the list identifying the main diagonal of matrix: E[ (w(t) -w_bar(t)) (w(t) -w_bar(t))^T ], size:  m*m positive matrix,  Dx(t)= Fx(t)+ Gw(t), the process noise */
# r_matrix_kf is the list identifying the main diagonal of matrix: E[ v(t) v(t)^T ], size:  p*p positive matrix, Z(t)= Hx(t)+ v(t), the measurement noise
no_states_kf            3
no_measurement_kf       1
q_matrix_kf             ( 10.0 150.0 100000.0 )
r_matrix_kf             ( 0.0000001 )

